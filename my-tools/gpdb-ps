#!/usr/bin/env python
# _*_ coding: utf-8 _*_

from lib.gpdb.process import get_all_gpdb_processes
from lib.utils import *


def filter_gpdb_process(cmdline):
    exclude_conditions = [
        "logger process",
        "checkpointer process",
        "writer process",
        "wal writer process",
        "stats collector process",
        "ftsprobe process",
        "sweeper process",
        "global deadlock detector process"
    ]

    for condition in exclude_conditions:
        if condition in cmdline[0]:
            return True

    return False


def output(master_procs, segment_procs, show_all):
    output_process_group(master_procs, "Master 进程信息", show_all)
    output_process_group(segment_procs, "Segment 进程信息", show_all)


def output_process_group(procs, group_descritpion, show_all=False):
    print green("%s\n" % group_descritpion)

    for p in procs:
        print yellow(p.pid), p.cmdline()[4], p.cmdline()[2]
        childern = p.children()

        if len(childern) > 1:
            childern.sort(key=lambda c: c.pid)

        for child in childern:
            cmdline = child.cmdline()
            if not show_all and filter_gpdb_process(cmdline):
                continue
            print "\t", output_proc(child)
        print "\n"


def output_proc(p):
    return "%s %s %s" % (red(p.pid), p.status(), p.cmdline()[0])


def my_options(parser):
    parser.add_option('-a', '--all',
                      action="store_true",
                      dest="all",
                      default=False,
                      help="Show all gpdb processes")


if __name__ == '__main__':
    try:
        (options, args), _ = parse_options('''This command show the gpdb processes''',
                                           my_options)
        m_procs, s_procs = get_all_gpdb_processes()
        output(m_procs, s_procs, options.all)
    except Exception as e:
        print e
        print e.message
