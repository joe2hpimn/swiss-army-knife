#!/usr/bin/env python
# _*_ coding: utf-8 _*_

from lib.gpdb.process import get_all_gpdb_processes, kill_all_processes, filter_gpdb_processes
from lib.utils import *


def output(master_procs, segment_procs, show_all):
    output_process_group(master_procs, "Master 进程信息", show_all)
    output_process_group(segment_procs, "Segment 进程信息", show_all)


def output_process_group(procs, group_descritpion, show_all=False):
    print green("%s\n" % group_descritpion)

    for p in procs:
        print yellow(p.pid), p.cmdline()[4], p.cmdline()[2]
        childern = p.children()

        if len(childern) > 1:
            childern.sort(key=lambda c: c.pid)

        for child in filter_gpdb_processes(childern):
            print "\t", output_proc(child)
        print "\n"


def output_proc(p):
    return "%s %s %s" % (red(p.pid), p.status(), p.cmdline()[0])


def my_options(parser):
    parser.add_option('-a', '--all',
                      action="store_true",
                      dest="all",
                      default=False,
                      help="Show all gpdb processes")

    parser.add_option('-k', '--kill',
                      action="store_true",
                      dest="kill",
                      default=False,
                      help="Kill all gpdb child processes")


if __name__ == '__main__':
    try:
        (options, args), _ = parse_options('''This command show the gpdb processes''',
                                           my_options)
        m_procs, s_procs = get_all_gpdb_processes()

        if options.kill:
            to_kill_processes = []

            all_parent_processes = m_procs + s_procs
            for p in all_parent_processes:
                to_kill_processes += p.children()

            to_kill_processes = filter_gpdb_processes(to_kill_processes)

            kill_all_processes(to_kill_processes)
        else:
            output(m_procs, s_procs, options.all)
    except Exception as e:
        print e
        print e.message
