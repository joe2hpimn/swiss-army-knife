#!/usr/bin/env python
# _*_ coding: utf-8 _*_

from lib.gpdb.process import get_all_gpdb_processes, kill_all_processes, filter_gpdb_processes, get_open_fds
from lib.utils import *


def output(master_procs, segment_procs, options):
    output_process_group(master_procs, "Master 进程信息", options)
    output_process_group(segment_procs, "Segment 进程信息", options)


def output_process_group(procs, group_descritpion, options):
    print green("%s\n" % group_descritpion)

    for p in procs:
        print yellow(p.pid), p.cmdline()[4], p.cmdline()[2]
        output_opened_file(p, options, 0)
        output_connections(p, options, 0)
        childern = p.children()

        if len(childern) > 1:
            childern.sort(key=lambda c: c.pid)

        if options.all:
            for child in childern:
                output_proc(child, options)
        else:
            for child in filter_gpdb_processes(childern):
                output_proc(child, options)
    print


def output_proc(p, options, level=1):
    print indent(level, "%s %s %s" % (red(p.pid), green(p.status()), yellow(p.cmdline()[0])))
    output_opened_file(p, options, level + 1)
    output_connections(p, options, level + 1)


def output_opened_file(p, options, level=1):
    if options.opened_file:
        print indent(level, green("已打开的文件:"))
        files = get_open_fds(p.pid)
        for f in files:
            print indent(level + 1,
                         "句柄号:%s  %s  %s" % (f.get('fd').ljust(4, " "), f.get('type').ljust(6, " "), f.get('path')))
        print "\n"


def output_connections(p, options, level=1):
    if options.conn:
        print indent(level, green("网络连接信息:"))
        connections = p.connections(kind='inet4')
        for c in connections:
            local_address = ""
            remote_address = ""
            if len(c.laddr) == 2:
                local_address = "%s:%s" % (c.laddr.ip, c.laddr.port)

            if len(c.raddr) == 2:
                remote_address = "%s:%s" % (c.raddr.ip, c.raddr.port)

            local_address = local_address.ljust(15, ' ')
            remote_address = remote_address.ljust(15, ' ')

            print indent(level + 1, "句柄号:%s    %s    %s   本地地址: %s     远程地址: %s     状态:%s" % (
                str(c.fd).ljust(4, " "), "AF_INET", "TCP" if c.type == 1 else 'UDP', red(local_address),
                yellow(remote_address), c.status))

        print "\n"


def my_options(parser):
    parser.add_argument('-a', '--all',
                      action="store_true",
                      dest="all",
                      default=False,
                      help="Show all gpdb processes")

    parser.add_argument('-k', '--kill',
                      action="store_true",
                      dest="kill",
                      default=False,
                      help="Kill all gpdb child processes")

    parser.add_argument('-f', '--opened-file',
                      action="store_true",
                      dest="opened_file",
                      default=False,
                      help="show the opened file")

    parser.add_argument('-c', '--connection',
                      action="store_true",
                      dest="conn",
                      default=False,
                      help="show the connections")


if __name__ == '__main__':
    try:
        options, parser = parse_options('''This command show the gpdb processes''',
                                        my_options)
        m_procs, s_procs = get_all_gpdb_processes()

        if options.kill:
            to_kill_processes = []

            all_parent_processes = m_procs + s_procs
            for p in all_parent_processes:
                to_kill_processes += p.children()

            to_kill_processes = filter_gpdb_processes(to_kill_processes)

            kill_all_processes(to_kill_processes)
        else:
            output(m_procs, s_procs, options)
    except Exception as e:
        print e
        print e.message
